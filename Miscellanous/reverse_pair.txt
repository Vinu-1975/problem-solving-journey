class Solution:
    def mergeSort(self,a):
        if len(a)<=1:
            return a,0
        mid = len(a)//2
        left_a,left_inv = self.mergeSort(a[:mid])
        right_a,right_inv = self.mergeSort(a[mid:])

        merged,cross_inv = self.merge_and_cnt(left_a,right_a)
        total_inv = left_inv + right_inv + cross_inv
        return merged,total_inv
    
    def merge_and_cnt(self,left,right):
        i = 0
        j = 0
        inv = 0

        for i in range(len(left)):
            while j<len(right) and left[i] > 2*right[j]:
                j+=1
            inv += j
        
        i = 0
        j = 0

        merged = []
        while i<len(left) and j<len(right):
            if(left[i]<=right[j]):
                merged.append(left[i])
                i+=1
            else:
                merged.append(right[j])
                j+=1
        merged.extend(left[i:])
        merged.extend(right[j:])

        return merged,inv


    def reversePairs(self, nums: List[int]) -> int:
        arr, res = self.mergeSort(nums)
        return res