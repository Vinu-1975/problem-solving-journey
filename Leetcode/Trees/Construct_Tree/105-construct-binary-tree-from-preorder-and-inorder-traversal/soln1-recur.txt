# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
            return None

        root_val = preorder.pop(0)
        root = TreeNode(root_val)
        root_idx = inorder.index(root_val)

        root.left = self.buildTree(preorder,inorder[:root_idx])
        root.right = self.buildTree(preorder,inorder[root_idx+1:])
        return root

"""
The idea is to locate the root node from the preorder traversal and then identify the left and right subtrees from the inorder traversal. Recursively, you can construct the left and right subtrees until the entire tree is constructed.
"""