class Solution:
	# time - O(n)
	# space - O(1)
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        n = len(arr)

        min_len = 0

        l = 0
        r = n-1

        # Find the longest non-decreasing prefix
        while l < n-1 and arr[l] <= arr[l+1]:
            l += 1
        
        # If the entire array is non-decreasing
        if l == n-1:
            return 0
        
        # Find the longest non-decreasing suffix
        while r > 0 and arr[r-1] <= arr[r]:
            r -= 1
        
        min_len = min(n-l-1,r)

        i = 0
        j = r
        while i <= l and j < n:
            if arr[i] <= arr[j]:
                min_len = min(min_len,j-i-1)
                i+=1
            else:
                j+=1
        
        return min_len



        